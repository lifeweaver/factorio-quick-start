import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.Files
import java.nio.file.Path

def archiveName = "${modName}_${version}.zip"

task clean(type:Delete) {
    delete "$buildDirectory", "$distDirectory"
    doFirst {
        println "Deleting folders named ${buildDirectory} and ${distDirectory}"
    }
}

task createFolder(type: Copy) {
    from "src", "assets", "README.md"
    into "${buildDirectory}/${modName}"
    doFirst {
        println "Building files at ${buildDirectory}/${modName}"
    }
}

class InfoJsonCheck extends DefaultTask {
    @Input
    String fieldName
    @Input
    String value
    @InputFile
    File infoJson = project.file('src/info.json')

    @TaskAction
    def checkString() {
        def infoJsonContents = new groovy.json.JsonSlurper().parseText(infoJson.text)
        def foundValue = infoJsonContents[fieldName]
        if ( foundValue != value ) {
            throw new InvalidUserDataException("The ${fieldName} for this build ($value) does not match the ${fieldName} in info.json (${foundValue}). This will cause Factorio to crash on startup. Build Aborted.")
        }
        println "$fieldName $value OK"
    }
}

task checkVersionNumber(type: InfoJsonCheck) {
    fieldName "version"
    value version
}

task checkModName(type: InfoJsonCheck) {
    fieldName "name"
    value modName
}

task createArchive(type: Zip) {
    archiveFileName = "$archiveName"
    destinationDirectory = file("$distDirectory")

    from "$buildDirectory"
    doFirst {
        println "Creating zip file named ${archiveName} from the contents of ${buildDirectory} in folder ${distDirectory}"
    }
}
createArchive.mustRunAfter createFolder

task build {
    dependsOn "checkVersionNumber"
    dependsOn "checkModName"
    dependsOn "createFolder"
    dependsOn "createArchive"
}

task backUpExistingMod(type: Copy) {
    from "${factorioModsDirectory}"
    include "${modName}*"
    exclude "*.bak"
    into "${factorioModsDirectory}"

    rename "(.+)", '$1.bak'
    doFirst {
        if (factorioModsDirectory == "") {
            println "WARNING: The factorioModsDirectory was not set, backing up in $rootDir instead"
        }
        println "Attempting to back up existing mod in ${factorioModsDirectory}"
    }
}

task moveNewMod(type: Copy) {
    from "${distDirectory}/${archiveName}"
    into "${factorioModsDirectory}"
    doFirst {
        if (factorioModsDirectory == "") {
            println "WARNING: The factorioModsDirectory was not set, mod zip file is in $rootDir instead"
        }
        println "Moving file ${archiveName} from ${distDirectory} to ${factorioModsDirectory}"
    }
}
moveNewMod.mustRunAfter backUpExistingMod

task patch {
    dependsOn "backUpExistingMod"
    dependsOn "moveNewMod"
}

task runFactorio() {
    doLast {
        // Stop the task if the mod file doesn't exist.
        File modFile = new File("${rootProject.projectDir}/${distDirectory}/${archiveName}")
        if(!modFile.exists()) {
            println "Mod file not found at: ${modFile.absolutePath}"
            return
        }


        if (!steamInstallDirectory) {
            /*
			 * Do we need to check for windows? As long as there is an env pointing to the program file location and steam
			 * is always env/Steam it should work. We can just add to the steamInstallSearchEnvs.
			 */
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                List searchEnvs = ((String) steamInstallSearchEnvs).split(',')
                steamInstallDirectory = searchEnvs.collect { String env ->
                    new File(System.getenv(env) + '/Steam')
                }.find { it.exists() }
            } else {
                //Implement additional cases as needed as needed
                throw new GradleException("impelment version of $name that works with your OS")
            }

            if (!steamInstallDirectory) {
                throw new GradleException("The steamInstallDirectory was not set")
            }
        }

        String saveFile = ""
        if("${factorioTestSaveFile}") {
            saveFile = "--load-game $factorioTestSaveFile"
        }

        String modsDirectory = ""
        if(runInTempModFolder.toBoolean()) {
            //TODO: check info.json for dependencies.

            Path tempDir = File.createTempDir().toPath()
            Path tempFile =  new File("${tempDir}/$archiveName").toPath()
            Files.copy(modFile.toPath(), tempFile)

            modsDirectory = "--mod-directory ${tempDir}"
        }

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            exec {
                commandLine 'cmd', '/c', "\"$steamInstallDirectory/Steam.exe\" -applaunch 427520 $saveFile $modsDirectory $additionalFactorioArgs"
            }
        } else {
            //Implement additional cases as needed as needed
            throw new GradleException("impelment version of $name that works with your OS")
        }
    }
}
